// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int             @id @default(autoincrement())
  uuid       String          @unique @default(uuid())
  email      String          @unique
  firstName  String          @map("first_name")
  lastName   String          @map("last_name")
  password   String
  updatedAt  DateTime        @updatedAt @map("updated_at")
  createdAt  DateTime        @default(now()) @map("created_at")
  knowledges UserKnowledge[]
  tickets    Ticket[]
  reviews    Review[]
  academies  UserAcademy[]
  academy    Academy?

  @@map("users")
}

model Knowledge {
  id          Int             @id @default(autoincrement())
  uuid        String          @unique @default(uuid())
  academyId   Int             @map("academy_id")
  title       String
  description String
  updatedAt   DateTime        @updatedAt @map("updated_at")
  createdAt   DateTime        @default(now()) @map("created_at")
  academy     Academy         @relation(fields: [academyId], references: [id])
  users       UserKnowledge[]
  tickets     Ticket[]

  @@map("knowledges")
}

model Ticket {
  id          Int       @id @default(autoincrement())
  uuid        String    @unique @default(uuid())
  userId      Int       @map("user_id")
  knowledgeId Int       @map("knowledge_id")
  title       String
  description String
  updatedAt   DateTime  @updatedAt @map("updated_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  owner       User      @relation(fields: [userId], references: [id])
  knowledge   Knowledge @relation(fields: [knowledgeId], references: [id])
  reviews     Review[]

  @@map("tickets")
}

model Review {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  userId    Int      @map("user_id")
  ticketId  Int      @map("ticket_id")
  comment   String
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id])
  ticket    Ticket   @relation(fields: [ticketId], references: [id])

  @@map("reviews")
}

model Academy {
  id         Int           @id @default(autoincrement())
  uuid       String        @unique @default(uuid())
  userId     Int           @unique @map("user_id")
  name       String        @unique
  updatedAt  DateTime      @updatedAt @map("updated_at")
  createdAt  DateTime      @default(now()) @map("created_at")
  owner      User          @relation(fields: [userId], references: [id])
  knowledges Knowledge[]
  users      UserAcademy[]

  @@map("academies")
}

model UserKnowledge {
  userId      Int       @map("user_id")
  knowledgeId Int       @map("knowledge_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  user        User      @relation(fields: [userId], references: [id])
  knowledge   Knowledge @relation(fields: [knowledgeId], references: [id])

  @@id([userId, knowledgeId])
  @@map("users_knowledges")
}

model UserAcademy {
  userId    Int      @map("user_id")
  academyId Int      @map("academy_id")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id])
  academy   Academy  @relation(fields: [academyId], references: [id])

  @@id([userId, academyId])
  @@map("users_academies")
}
